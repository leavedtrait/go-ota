package views

import (
	"github.com/axzilla/templui/component/button"
	"github.com/axzilla/templui/component/form"
	"github.com/axzilla/templui/component/input"
	"github.com/axzilla/templui/component/spinner"
	"bytes"
	"context"
)

type BufferWriter struct{
    buf *bytes.Buffer
}

func (w *BufferWriter) Write(p []byte) (n int, err error) {
    return w.buf.Write(p)
}

func renderComponents(c templ.Component)string{
    w := &BufferWriter{buf: bytes.NewBuffer(nil)}
    err := c.Render(context.Background(), w)
    if err != nil{
        return ""//You fucked up
    }
    return w.buf.String()
}

var(
    PrimaryButtonHTML = renderComponents(ButtonPrimary())
    LoadingButtonHTML = renderComponents(ButtonLoading())
)

templ LoginPage(errMsg string) {
	<html lang="en">
		<head>
			<meta charset="UTF-8"/>
			<title>Login</title>
			<link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet"/>
		</head>
		<body class="flex items-center justify-center min-h-screen bg-gray-100">
			<div class="w-full max-w-sm p-6 bg-white rounded-lg shadow-md">
				<h2 class="mb-4 text-2xl font-semibold text-center text-gray-800">Login</h2>
				if errMsg != "" {
					<div
						id="error-box"
						class="mb-4 text-sm text-red-600 bg-red-100 border border-red-400 p-2 rounded"
					>
						{ errMsg }
					</div>
				} else {
					<div
						id="error-box"
						class="hidden mb-4 text-sm text-red-600 bg-red-100 border border-red-400 p-2 rounded"
					></div>
				}
				@LoginForm()
			</div>
		</body>
	</html>
}

templ LoginForm() {
	<div class="w-full max-w-sm">
		<form id="login-form" class="space-y-4">
            @InputForm()
			<div id="error-box" class="hidden text-red-600 text-sm bg-red-100 border border-red-400 p-2 rounded"></div>
			<div id="button-container">
				@ButtonPrimary()
			</div>
		</form>
		<script>
			document.getElementById("login-form").addEventListener("submit", async function (e) {
				e.preventDefault();
				const email = document.getElementById("email").value;
				const password = document.getElementById("password").value;
				const errorBox = document.getElementById("error-box");
				const buttonContainer = document.getElementById("button-container");

				// Replace button with loading state
				buttonContainer.innerHTML = {{ LoadingButtonHTML }};

				errorBox.classList.add("hidden");

				try {
					const response = await fetch("/users/login", {
						method: "POST",
						headers: {
							"Content-Type": "application/json"
						},
						body: JSON.stringify({ email, password })
					});
					
					const result = await response.json();

					if (response.ok) {
						window.location.href = "/";
					} else {
						throw new Error(result.error || "Login failed.");
					}
				} catch (err) {
					// Restore original button and show error
					buttonContainer.innerHTML = {{ PrimaryButtonHTML }};
					errorBox.textContent = err.message;
					errorBox.classList.remove("hidden");
				}
			});
		</script>
	</div>
}

templ InputForm() {
	@form.Item() {
		@form.Label(form.LabelProps{For: "email"}) {
			Email
		}
		@input.Input(input.Props{
			ID:          "email",
			Type:        input.TypeEmail,
			Name:        "email",
			Placeholder: "m@example.com",
			Required:    true,
		})
	}
	@form.Item() {
		@form.Label(form.LabelProps{For: "password"}) {
			Password
		}
		@input.Input(input.Props{
			ID:          "password",
			Type:        input.TypePassword,
			Name:        "password",
			Placeholder: "••••••••",
			Required:    true,
		})
	}
}

templ ButtonPrimary() {
	@button.Button(button.Props{
		ID:      "login-button",
		Class:   "w-full px-3 py-2 font-semibold text-white bg-blue-500 rounded-lg hover:bg-blue-600",
		Type:    button.TypeSubmit,
		Variant: button.VariantDefault,
	}) {
		Login
	}
}

templ ButtonLoading() {
	@button.Button(button.Props{
		Disabled: true,
		Class:    "w-full px-3 py-2 font-semibold text-white bg-gray-500 gap-2 flex items-center justify-center cursor-not-allowed",
	}) {
		@spinner.Spinner(spinner.Props{
			Size:  spinner.SizeSm,      
			Color: "text-white",
            Class: "animate-spin transition duration-500 ease-in-out",

		})
		Please wait
	}
}
//templ InitClientSideScript(){}